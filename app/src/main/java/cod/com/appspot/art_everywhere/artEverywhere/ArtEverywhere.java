/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-03-26 20:30:19 UTC)
 * on 2015-04-28 at 23:00:03 UTC 
 * Modify at your own risk.
 */

package cod.com.appspot.art_everywhere.artEverywhere;

/**
 * Service definition for ArtEverywhere (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ArtEverywhereRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ArtEverywhere extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.20.0 of the artEverywhere library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://art-everywhere.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "artEverywhere/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ArtEverywhere(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ArtEverywhere(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Artistinfo collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Artistinfo.List request = artEverywhere.artistinfo().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Artistinfo artistinfo() {
    return new Artistinfo();
  }

  /**
   * The "artistinfo" collection of methods.
   */
  public class Artistinfo {

    /**
     * Create a request for the method "artistinfo.updateartist".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Updateartist#execute()} method to invoke the remote operation.
     *
     * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistUpdateMessage}
     * @return the request
     */
    public Updateartist updateartist(cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistUpdateMessage content) throws java.io.IOException {
      Updateartist result = new Updateartist(content);
      initialize(result);
      return result;
    }

    public class Updateartist extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainUpdateResponseMessage> {

      private static final String REST_PATH = "artistinfo";

      /**
       * Create a request for the method "artistinfo.updateartist".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Updateartist#execute()} method to invoke the remote
       * operation. <p> {@link
       * Updateartist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistUpdateMessage}
       * @since 1.13
       */
      protected Updateartist(cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistUpdateMessage content) {
        super(ArtEverywhere.this, "POST", REST_PATH, content, cod.com.appspot.art_everywhere.artEverywhere.model.MainUpdateResponseMessage.class);
      }

      @Override
      public Updateartist setAlt(java.lang.String alt) {
        return (Updateartist) super.setAlt(alt);
      }

      @Override
      public Updateartist setFields(java.lang.String fields) {
        return (Updateartist) super.setFields(fields);
      }

      @Override
      public Updateartist setKey(java.lang.String key) {
        return (Updateartist) super.setKey(key);
      }

      @Override
      public Updateartist setOauthToken(java.lang.String oauthToken) {
        return (Updateartist) super.setOauthToken(oauthToken);
      }

      @Override
      public Updateartist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updateartist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updateartist setQuotaUser(java.lang.String quotaUser) {
        return (Updateartist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updateartist setUserIp(java.lang.String userIp) {
        return (Updateartist) super.setUserIp(userIp);
      }

      @Override
      public Updateartist set(String parameterName, Object value) {
        return (Updateartist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Artistlist collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Artistlist.List request = artEverywhere.artistlist().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Artistlist artistlist() {
    return new Artistlist();
  }

  /**
   * The "artistlist" collection of methods.
   */
  public class Artistlist {

    /**
     * Create a request for the method "artistlist.getartists".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Getartists#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Getartists getartists() throws java.io.IOException {
      Getartists result = new Getartists();
      initialize(result);
      return result;
    }

    public class Getartists extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistBriefCollection> {

      private static final String REST_PATH = "artistlist";

      /**
       * Create a request for the method "artistlist.getartists".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Getartists#execute()} method to invoke the remote
       * operation. <p> {@link
       * Getartists#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Getartists() {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistBriefCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getartists setAlt(java.lang.String alt) {
        return (Getartists) super.setAlt(alt);
      }

      @Override
      public Getartists setFields(java.lang.String fields) {
        return (Getartists) super.setFields(fields);
      }

      @Override
      public Getartists setKey(java.lang.String key) {
        return (Getartists) super.setKey(key);
      }

      @Override
      public Getartists setOauthToken(java.lang.String oauthToken) {
        return (Getartists) super.setOauthToken(oauthToken);
      }

      @Override
      public Getartists setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getartists) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getartists setQuotaUser(java.lang.String quotaUser) {
        return (Getartists) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getartists setUserIp(java.lang.String userIp) {
        return (Getartists) super.setUserIp(userIp);
      }

      @Override
      public Getartists set(String parameterName, Object value) {
        return (Getartists) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Artworks collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Artworks.List request = artEverywhere.artworks().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Artworks artworks() {
    return new Artworks();
  }

  /**
   * The "artworks" collection of methods.
   */
  public class Artworks {

    /**
     * Create a request for the method "artworks.getartworks".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Getartworks#execute()} method to invoke the remote operation.
     *
     * @param email
     * @return the request
     */
    public Getartworks getartworks(java.lang.String email) throws java.io.IOException {
      Getartworks result = new Getartworks(email);
      initialize(result);
      return result;
    }

    public class Getartworks extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainPictureDetailsCollection> {

      private static final String REST_PATH = "artworks";

      /**
       * Create a request for the method "artworks.getartworks".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Getartworks#execute()} method to invoke the remote
       * operation. <p> {@link
       * Getartworks#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param email
       * @since 1.13
       */
      protected Getartworks(java.lang.String email) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainPictureDetailsCollection.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getartworks setAlt(java.lang.String alt) {
        return (Getartworks) super.setAlt(alt);
      }

      @Override
      public Getartworks setFields(java.lang.String fields) {
        return (Getartworks) super.setFields(fields);
      }

      @Override
      public Getartworks setKey(java.lang.String key) {
        return (Getartworks) super.setKey(key);
      }

      @Override
      public Getartworks setOauthToken(java.lang.String oauthToken) {
        return (Getartworks) super.setOauthToken(oauthToken);
      }

      @Override
      public Getartworks setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getartworks) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getartworks setQuotaUser(java.lang.String quotaUser) {
        return (Getartworks) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getartworks setUserIp(java.lang.String userIp) {
        return (Getartworks) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Getartworks setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @Override
      public Getartworks set(String parameterName, Object value) {
        return (Getartworks) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Blocked collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Blocked.List request = artEverywhere.blocked().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Blocked blocked() {
    return new Blocked();
  }

  /**
   * The "blocked" collection of methods.
   */
  public class Blocked {

    /**
     * Create a request for the method "blocked.isblocked".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Isblocked#execute()} method to invoke the remote operation.
     *
     * @param email
     * @return the request
     */
    public Isblocked isblocked(java.lang.String email) throws java.io.IOException {
      Isblocked result = new Isblocked(email);
      initialize(result);
      return result;
    }

    public class Isblocked extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainBlocekedUserResponse> {

      private static final String REST_PATH = "blocked";

      /**
       * Create a request for the method "blocked.isblocked".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Isblocked#execute()} method to invoke the remote
       * operation. <p> {@link
       * Isblocked#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param email
       * @since 1.13
       */
      protected Isblocked(java.lang.String email) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainBlocekedUserResponse.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Isblocked setAlt(java.lang.String alt) {
        return (Isblocked) super.setAlt(alt);
      }

      @Override
      public Isblocked setFields(java.lang.String fields) {
        return (Isblocked) super.setFields(fields);
      }

      @Override
      public Isblocked setKey(java.lang.String key) {
        return (Isblocked) super.setKey(key);
      }

      @Override
      public Isblocked setOauthToken(java.lang.String oauthToken) {
        return (Isblocked) super.setOauthToken(oauthToken);
      }

      @Override
      public Isblocked setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Isblocked) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Isblocked setQuotaUser(java.lang.String quotaUser) {
        return (Isblocked) super.setQuotaUser(quotaUser);
      }

      @Override
      public Isblocked setUserIp(java.lang.String userIp) {
        return (Isblocked) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Isblocked setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @Override
      public Isblocked set(String parameterName, Object value) {
        return (Isblocked) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Change collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Change.List request = artEverywhere.change().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Change change() {
    return new Change();
  }

  /**
   * The "change" collection of methods.
   */
  public class Change {

    /**
     * Create a request for the method "change.changelikestatus".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Changelikestatus#execute()} method to invoke the remote operation.
     *
     * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeRequest}
     * @return the request
     */
    public Changelikestatus changelikestatus(cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeRequest content) throws java.io.IOException {
      Changelikestatus result = new Changelikestatus(content);
      initialize(result);
      return result;
    }

    public class Changelikestatus extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeResponse> {

      private static final String REST_PATH = "change";

      /**
       * Create a request for the method "change.changelikestatus".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Changelikestatus#execute()} method to invoke the remote
       * operation. <p> {@link Changelikestatus#initialize (com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeRequest}
       * @since 1.13
       */
      protected Changelikestatus(cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeRequest content) {
        super(ArtEverywhere.this, "POST", REST_PATH, content, cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeResponse.class);
      }

      @Override
      public Changelikestatus setAlt(java.lang.String alt) {
        return (Changelikestatus) super.setAlt(alt);
      }

      @Override
      public Changelikestatus setFields(java.lang.String fields) {
        return (Changelikestatus) super.setFields(fields);
      }

      @Override
      public Changelikestatus setKey(java.lang.String key) {
        return (Changelikestatus) super.setKey(key);
      }

      @Override
      public Changelikestatus setOauthToken(java.lang.String oauthToken) {
        return (Changelikestatus) super.setOauthToken(oauthToken);
      }

      @Override
      public Changelikestatus setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Changelikestatus) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Changelikestatus setQuotaUser(java.lang.String quotaUser) {
        return (Changelikestatus) super.setQuotaUser(quotaUser);
      }

      @Override
      public Changelikestatus setUserIp(java.lang.String userIp) {
        return (Changelikestatus) super.setUserIp(userIp);
      }

      @Override
      public Changelikestatus set(String parameterName, Object value) {
        return (Changelikestatus) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Check collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Check.List request = artEverywhere.check().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Check check() {
    return new Check();
  }

  /**
   * The "check" collection of methods.
   */
  public class Check {

    /**
     * Create a request for the method "check.checklogin".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Checklogin#execute()} method to invoke the remote operation.
     *
     * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistRequestMessage}
     * @return the request
     */
    public Checklogin checklogin(cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistRequestMessage content) throws java.io.IOException {
      Checklogin result = new Checklogin(content);
      initialize(result);
      return result;
    }

    public class Checklogin extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "check";

      /**
       * Create a request for the method "check.checklogin".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Checklogin#execute()} method to invoke the remote
       * operation. <p> {@link
       * Checklogin#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistRequestMessage}
       * @since 1.13
       */
      protected Checklogin(cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistRequestMessage content) {
        super(ArtEverywhere.this, "POST", REST_PATH, content, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
      }

      @Override
      public Checklogin setAlt(java.lang.String alt) {
        return (Checklogin) super.setAlt(alt);
      }

      @Override
      public Checklogin setFields(java.lang.String fields) {
        return (Checklogin) super.setFields(fields);
      }

      @Override
      public Checklogin setKey(java.lang.String key) {
        return (Checklogin) super.setKey(key);
      }

      @Override
      public Checklogin setOauthToken(java.lang.String oauthToken) {
        return (Checklogin) super.setOauthToken(oauthToken);
      }

      @Override
      public Checklogin setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Checklogin) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Checklogin setQuotaUser(java.lang.String quotaUser) {
        return (Checklogin) super.setQuotaUser(quotaUser);
      }

      @Override
      public Checklogin setUserIp(java.lang.String userIp) {
        return (Checklogin) super.setUserIp(userIp);
      }

      @Override
      public Checklogin set(String parameterName, Object value) {
        return (Checklogin) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Comment collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Comment.List request = artEverywhere.comment().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Comment comment() {
    return new Comment();
  }

  /**
   * The "comment" collection of methods.
   */
  public class Comment {

    /**
     * Create a request for the method "comment.insertcomment".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Insertcomment#execute()} method to invoke the remote operation.
     *
     * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainInsertCommentMessage}
     * @return the request
     */
    public Insertcomment insertcomment(cod.com.appspot.art_everywhere.artEverywhere.model.MainInsertCommentMessage content) throws java.io.IOException {
      Insertcomment result = new Insertcomment(content);
      initialize(result);
      return result;
    }

    public class Insertcomment extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "comment";

      /**
       * Create a request for the method "comment.insertcomment".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Insertcomment#execute()} method to invoke the remote
       * operation. <p> {@link Insertcomment#initialize (com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainInsertCommentMessage}
       * @since 1.13
       */
      protected Insertcomment(cod.com.appspot.art_everywhere.artEverywhere.model.MainInsertCommentMessage content) {
        super(ArtEverywhere.this, "POST", REST_PATH, content, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
      }

      @Override
      public Insertcomment setAlt(java.lang.String alt) {
        return (Insertcomment) super.setAlt(alt);
      }

      @Override
      public Insertcomment setFields(java.lang.String fields) {
        return (Insertcomment) super.setFields(fields);
      }

      @Override
      public Insertcomment setKey(java.lang.String key) {
        return (Insertcomment) super.setKey(key);
      }

      @Override
      public Insertcomment setOauthToken(java.lang.String oauthToken) {
        return (Insertcomment) super.setOauthToken(oauthToken);
      }

      @Override
      public Insertcomment setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insertcomment) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insertcomment setQuotaUser(java.lang.String quotaUser) {
        return (Insertcomment) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insertcomment setUserIp(java.lang.String userIp) {
        return (Insertcomment) super.setUserIp(userIp);
      }

      @Override
      public Insertcomment set(String parameterName, Object value) {
        return (Insertcomment) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Delete collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Delete.List request = artEverywhere.delete().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Delete delete() {
    return new Delete();
  }

  /**
   * The "delete" collection of methods.
   */
  public class Delete {

    /**
     * Create a request for the method "delete.deletephoto".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Deletephoto#execute()} method to invoke the remote operation.
     *
     * @param url
     * @return the request
     */
    public Deletephoto deletephoto(java.lang.String url) throws java.io.IOException {
      Deletephoto result = new Deletephoto(url);
      initialize(result);
      return result;
    }

    public class Deletephoto extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "delete";

      /**
       * Create a request for the method "delete.deletephoto".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Deletephoto#execute()} method to invoke the remote
       * operation. <p> {@link
       * Deletephoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param url
       * @since 1.13
       */
      protected Deletephoto(java.lang.String url) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
        this.url = com.google.api.client.util.Preconditions.checkNotNull(url, "Required parameter url must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Deletephoto setAlt(java.lang.String alt) {
        return (Deletephoto) super.setAlt(alt);
      }

      @Override
      public Deletephoto setFields(java.lang.String fields) {
        return (Deletephoto) super.setFields(fields);
      }

      @Override
      public Deletephoto setKey(java.lang.String key) {
        return (Deletephoto) super.setKey(key);
      }

      @Override
      public Deletephoto setOauthToken(java.lang.String oauthToken) {
        return (Deletephoto) super.setOauthToken(oauthToken);
      }

      @Override
      public Deletephoto setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Deletephoto) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Deletephoto setQuotaUser(java.lang.String quotaUser) {
        return (Deletephoto) super.setQuotaUser(quotaUser);
      }

      @Override
      public Deletephoto setUserIp(java.lang.String userIp) {
        return (Deletephoto) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String url;

      /**

       */
      public java.lang.String getUrl() {
        return url;
      }

      public Deletephoto setUrl(java.lang.String url) {
        this.url = url;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String admin;

      /**

       */
      public java.lang.String getAdmin() {
        return admin;
      }

      public Deletephoto setAdmin(java.lang.String admin) {
        this.admin = admin;
        return this;
      }

      @Override
      public Deletephoto set(String parameterName, Object value) {
        return (Deletephoto) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Display collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Display.List request = artEverywhere.display().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Display display() {
    return new Display();
  }

  /**
   * The "display" collection of methods.
   */
  public class Display {

    /**
     * Create a request for the method "display.getphotos".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Getphotos#execute()} method to invoke the remote operation.
     *
     * @param fetch
     * @return the request
     */
    public Getphotos getphotos(java.lang.Long fetch) throws java.io.IOException {
      Getphotos result = new Getphotos(fetch);
      initialize(result);
      return result;
    }

    public class Getphotos extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection> {

      private static final String REST_PATH = "display";

      /**
       * Create a request for the method "display.getphotos".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Getphotos#execute()} method to invoke the remote
       * operation. <p> {@link
       * Getphotos#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fetch
       * @since 1.13
       */
      protected Getphotos(java.lang.Long fetch) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection.class);
        this.fetch = com.google.api.client.util.Preconditions.checkNotNull(fetch, "Required parameter fetch must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getphotos setAlt(java.lang.String alt) {
        return (Getphotos) super.setAlt(alt);
      }

      @Override
      public Getphotos setFields(java.lang.String fields) {
        return (Getphotos) super.setFields(fields);
      }

      @Override
      public Getphotos setKey(java.lang.String key) {
        return (Getphotos) super.setKey(key);
      }

      @Override
      public Getphotos setOauthToken(java.lang.String oauthToken) {
        return (Getphotos) super.setOauthToken(oauthToken);
      }

      @Override
      public Getphotos setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getphotos) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getphotos setQuotaUser(java.lang.String quotaUser) {
        return (Getphotos) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getphotos setUserIp(java.lang.String userIp) {
        return (Getphotos) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long fetch;

      /**

       */
      public java.lang.Long getFetch() {
        return fetch;
      }

      public Getphotos setFetch(java.lang.Long fetch) {
        this.fetch = fetch;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String lang;

      /**

       */
      public java.lang.String getLang() {
        return lang;
      }

      public Getphotos setLang(java.lang.String lang) {
        this.lang = lang;
        return this;
      }

      @com.google.api.client.util.Key("date_time")
      private java.lang.String dateTime;

      /**

       */
      public java.lang.String getDateTime() {
        return dateTime;
      }

      public Getphotos setDateTime(java.lang.String dateTime) {
        this.dateTime = dateTime;
        return this;
      }

      @Override
      public Getphotos set(String parameterName, Object value) {
        return (Getphotos) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Displayplace collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Displayplace.List request = artEverywhere.displayplace().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Displayplace displayplace() {
    return new Displayplace();
  }

  /**
   * The "displayplace" collection of methods.
   */
  public class Displayplace {

    /**
     * Create a request for the method "displayplace.getphotos".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Getphotos#execute()} method to invoke the remote operation.
     *
     * @param fetch
     * @param luogo
     * @return the request
     */
    public Getphotos getphotos(java.lang.Long fetch, java.lang.String luogo) throws java.io.IOException {
      Getphotos result = new Getphotos(fetch, luogo);
      initialize(result);
      return result;
    }

    public class Getphotos extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection> {

      private static final String REST_PATH = "displayplace";

      /**
       * Create a request for the method "displayplace.getphotos".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Getphotos#execute()} method to invoke the remote
       * operation. <p> {@link
       * Getphotos#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fetch
       * @param luogo
       * @since 1.13
       */
      protected Getphotos(java.lang.Long fetch, java.lang.String luogo) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection.class);
        this.fetch = com.google.api.client.util.Preconditions.checkNotNull(fetch, "Required parameter fetch must be specified.");
        this.luogo = com.google.api.client.util.Preconditions.checkNotNull(luogo, "Required parameter luogo must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getphotos setAlt(java.lang.String alt) {
        return (Getphotos) super.setAlt(alt);
      }

      @Override
      public Getphotos setFields(java.lang.String fields) {
        return (Getphotos) super.setFields(fields);
      }

      @Override
      public Getphotos setKey(java.lang.String key) {
        return (Getphotos) super.setKey(key);
      }

      @Override
      public Getphotos setOauthToken(java.lang.String oauthToken) {
        return (Getphotos) super.setOauthToken(oauthToken);
      }

      @Override
      public Getphotos setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getphotos) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getphotos setQuotaUser(java.lang.String quotaUser) {
        return (Getphotos) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getphotos setUserIp(java.lang.String userIp) {
        return (Getphotos) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long fetch;

      /**

       */
      public java.lang.Long getFetch() {
        return fetch;
      }

      public Getphotos setFetch(java.lang.Long fetch) {
        this.fetch = fetch;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String luogo;

      /**

       */
      public java.lang.String getLuogo() {
        return luogo;
      }

      public Getphotos setLuogo(java.lang.String luogo) {
        this.luogo = luogo;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String lang;

      /**

       */
      public java.lang.String getLang() {
        return lang;
      }

      public Getphotos setLang(java.lang.String lang) {
        this.lang = lang;
        return this;
      }

      @com.google.api.client.util.Key("date_time")
      private java.lang.String dateTime;

      /**

       */
      public java.lang.String getDateTime() {
        return dateTime;
      }

      public Getphotos setDateTime(java.lang.String dateTime) {
        this.dateTime = dateTime;
        return this;
      }

      @Override
      public Getphotos set(String parameterName, Object value) {
        return (Getphotos) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Displaytechnique collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Displaytechnique.List request = artEverywhere.displaytechnique().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Displaytechnique displaytechnique() {
    return new Displaytechnique();
  }

  /**
   * The "displaytechnique" collection of methods.
   */
  public class Displaytechnique {

    /**
     * Create a request for the method "displaytechnique.getphotos".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Getphotos#execute()} method to invoke the remote operation.
     *
     * @param fetch
     * @param technique
     * @return the request
     */
    public Getphotos getphotos(java.lang.Long fetch, java.lang.String technique) throws java.io.IOException {
      Getphotos result = new Getphotos(fetch, technique);
      initialize(result);
      return result;
    }

    public class Getphotos extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection> {

      private static final String REST_PATH = "displaytechnique";

      /**
       * Create a request for the method "displaytechnique.getphotos".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Getphotos#execute()} method to invoke the remote
       * operation. <p> {@link
       * Getphotos#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fetch
       * @param technique
       * @since 1.13
       */
      protected Getphotos(java.lang.Long fetch, java.lang.String technique) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection.class);
        this.fetch = com.google.api.client.util.Preconditions.checkNotNull(fetch, "Required parameter fetch must be specified.");
        this.technique = com.google.api.client.util.Preconditions.checkNotNull(technique, "Required parameter technique must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getphotos setAlt(java.lang.String alt) {
        return (Getphotos) super.setAlt(alt);
      }

      @Override
      public Getphotos setFields(java.lang.String fields) {
        return (Getphotos) super.setFields(fields);
      }

      @Override
      public Getphotos setKey(java.lang.String key) {
        return (Getphotos) super.setKey(key);
      }

      @Override
      public Getphotos setOauthToken(java.lang.String oauthToken) {
        return (Getphotos) super.setOauthToken(oauthToken);
      }

      @Override
      public Getphotos setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getphotos) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getphotos setQuotaUser(java.lang.String quotaUser) {
        return (Getphotos) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getphotos setUserIp(java.lang.String userIp) {
        return (Getphotos) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long fetch;

      /**

       */
      public java.lang.Long getFetch() {
        return fetch;
      }

      public Getphotos setFetch(java.lang.Long fetch) {
        this.fetch = fetch;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String technique;

      /**

       */
      public java.lang.String getTechnique() {
        return technique;
      }

      public Getphotos setTechnique(java.lang.String technique) {
        this.technique = technique;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String lang;

      /**

       */
      public java.lang.String getLang() {
        return lang;
      }

      public Getphotos setLang(java.lang.String lang) {
        this.lang = lang;
        return this;
      }

      @com.google.api.client.util.Key("date_time")
      private java.lang.String dateTime;

      /**

       */
      public java.lang.String getDateTime() {
        return dateTime;
      }

      public Getphotos setDateTime(java.lang.String dateTime) {
        this.dateTime = dateTime;
        return this;
      }

      @Override
      public Getphotos set(String parameterName, Object value) {
        return (Getphotos) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Flag collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Flag.List request = artEverywhere.flag().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Flag flag() {
    return new Flag();
  }

  /**
   * The "flag" collection of methods.
   */
  public class Flag {

    /**
     * Create a request for the method "flag.flagcontent".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Flagcontent#execute()} method to invoke the remote operation.
     *
     * @param flagger
     * @param flagged
     * @param code
     * @param url
     * @return the request
     */
    public Flagcontent flagcontent(java.lang.String flagger, java.lang.String flagged, java.lang.Long code, java.lang.String url) throws java.io.IOException {
      Flagcontent result = new Flagcontent(flagger, flagged, code, url);
      initialize(result);
      return result;
    }

    public class Flagcontent extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "flag";

      /**
       * Create a request for the method "flag.flagcontent".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Flagcontent#execute()} method to invoke the remote
       * operation. <p> {@link
       * Flagcontent#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param flagger
       * @param flagged
       * @param code
       * @param url
       * @since 1.13
       */
      protected Flagcontent(java.lang.String flagger, java.lang.String flagged, java.lang.Long code, java.lang.String url) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
        this.flagger = com.google.api.client.util.Preconditions.checkNotNull(flagger, "Required parameter flagger must be specified.");
        this.flagged = com.google.api.client.util.Preconditions.checkNotNull(flagged, "Required parameter flagged must be specified.");
        this.code = com.google.api.client.util.Preconditions.checkNotNull(code, "Required parameter code must be specified.");
        this.url = com.google.api.client.util.Preconditions.checkNotNull(url, "Required parameter url must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Flagcontent setAlt(java.lang.String alt) {
        return (Flagcontent) super.setAlt(alt);
      }

      @Override
      public Flagcontent setFields(java.lang.String fields) {
        return (Flagcontent) super.setFields(fields);
      }

      @Override
      public Flagcontent setKey(java.lang.String key) {
        return (Flagcontent) super.setKey(key);
      }

      @Override
      public Flagcontent setOauthToken(java.lang.String oauthToken) {
        return (Flagcontent) super.setOauthToken(oauthToken);
      }

      @Override
      public Flagcontent setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Flagcontent) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Flagcontent setQuotaUser(java.lang.String quotaUser) {
        return (Flagcontent) super.setQuotaUser(quotaUser);
      }

      @Override
      public Flagcontent setUserIp(java.lang.String userIp) {
        return (Flagcontent) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String flagger;

      /**

       */
      public java.lang.String getFlagger() {
        return flagger;
      }

      public Flagcontent setFlagger(java.lang.String flagger) {
        this.flagger = flagger;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String flagged;

      /**

       */
      public java.lang.String getFlagged() {
        return flagged;
      }

      public Flagcontent setFlagged(java.lang.String flagged) {
        this.flagged = flagged;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long code;

      /**

       */
      public java.lang.Long getCode() {
        return code;
      }

      public Flagcontent setCode(java.lang.Long code) {
        this.code = code;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String url;

      /**

       */
      public java.lang.String getUrl() {
        return url;
      }

      public Flagcontent setUrl(java.lang.String url) {
        this.url = url;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String comment;

      /**

       */
      public java.lang.String getComment() {
        return comment;
      }

      public Flagcontent setComment(java.lang.String comment) {
        this.comment = comment;
        return this;
      }

      @Override
      public Flagcontent set(String parameterName, Object value) {
        return (Flagcontent) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Flags collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Flags.List request = artEverywhere.flags().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Flags flags() {
    return new Flags();
  }

  /**
   * The "flags" collection of methods.
   */
  public class Flags {

    /**
     * Create a request for the method "flags.flaglist".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Flaglist#execute()} method to invoke the remote operation.
     *
     * @param email
     * @return the request
     */
    public Flaglist flaglist(java.lang.String email) throws java.io.IOException {
      Flaglist result = new Flaglist(email);
      initialize(result);
      return result;
    }

    public class Flaglist extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainFlagEntryCollection> {

      private static final String REST_PATH = "flags";

      /**
       * Create a request for the method "flags.flaglist".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Flaglist#execute()} method to invoke the remote operation.
       * <p> {@link
       * Flaglist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param email
       * @since 1.13
       */
      protected Flaglist(java.lang.String email) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainFlagEntryCollection.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Flaglist setAlt(java.lang.String alt) {
        return (Flaglist) super.setAlt(alt);
      }

      @Override
      public Flaglist setFields(java.lang.String fields) {
        return (Flaglist) super.setFields(fields);
      }

      @Override
      public Flaglist setKey(java.lang.String key) {
        return (Flaglist) super.setKey(key);
      }

      @Override
      public Flaglist setOauthToken(java.lang.String oauthToken) {
        return (Flaglist) super.setOauthToken(oauthToken);
      }

      @Override
      public Flaglist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Flaglist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Flaglist setQuotaUser(java.lang.String quotaUser) {
        return (Flaglist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Flaglist setUserIp(java.lang.String userIp) {
        return (Flaglist) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Flaglist setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @Override
      public Flaglist set(String parameterName, Object value) {
        return (Flaglist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Getinfo collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Getinfo.List request = artEverywhere.getinfo().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Getinfo getinfo() {
    return new Getinfo();
  }

  /**
   * The "getinfo" collection of methods.
   */
  public class Getinfo {

    /**
     * Create a request for the method "getinfo.getartist".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Getartist#execute()} method to invoke the remote operation.
     *
     * @param email
     * @return the request
     */
    public Getartist getartist(java.lang.String email) throws java.io.IOException {
      Getartist result = new Getartist(email);
      initialize(result);
      return result;
    }

    public class Getartist extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistDetailsMessage> {

      private static final String REST_PATH = "getinfo";

      /**
       * Create a request for the method "getinfo.getartist".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Getartist#execute()} method to invoke the remote
       * operation. <p> {@link
       * Getartist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param email
       * @since 1.13
       */
      protected Getartist(java.lang.String email) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistDetailsMessage.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getartist setAlt(java.lang.String alt) {
        return (Getartist) super.setAlt(alt);
      }

      @Override
      public Getartist setFields(java.lang.String fields) {
        return (Getartist) super.setFields(fields);
      }

      @Override
      public Getartist setKey(java.lang.String key) {
        return (Getartist) super.setKey(key);
      }

      @Override
      public Getartist setOauthToken(java.lang.String oauthToken) {
        return (Getartist) super.setOauthToken(oauthToken);
      }

      @Override
      public Getartist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getartist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getartist setQuotaUser(java.lang.String quotaUser) {
        return (Getartist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getartist setUserIp(java.lang.String userIp) {
        return (Getartist) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Getartist setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @Override
      public Getartist set(String parameterName, Object value) {
        return (Getartist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Like collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Like.List request = artEverywhere.like().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Like like() {
    return new Like();
  }

  /**
   * The "like" collection of methods.
   */
  public class Like {

    /**
     * Create a request for the method "like.likestatus".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Likestatus#execute()} method to invoke the remote operation.
     *
     * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeRequest}
     * @return the request
     */
    public Likestatus likestatus(cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeRequest content) throws java.io.IOException {
      Likestatus result = new Likestatus(content);
      initialize(result);
      return result;
    }

    public class Likestatus extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeResponse> {

      private static final String REST_PATH = "like";

      /**
       * Create a request for the method "like.likestatus".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Likestatus#execute()} method to invoke the remote
       * operation. <p> {@link
       * Likestatus#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeRequest}
       * @since 1.13
       */
      protected Likestatus(cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeRequest content) {
        super(ArtEverywhere.this, "POST", REST_PATH, content, cod.com.appspot.art_everywhere.artEverywhere.model.MainGeneralLikeResponse.class);
      }

      @Override
      public Likestatus setAlt(java.lang.String alt) {
        return (Likestatus) super.setAlt(alt);
      }

      @Override
      public Likestatus setFields(java.lang.String fields) {
        return (Likestatus) super.setFields(fields);
      }

      @Override
      public Likestatus setKey(java.lang.String key) {
        return (Likestatus) super.setKey(key);
      }

      @Override
      public Likestatus setOauthToken(java.lang.String oauthToken) {
        return (Likestatus) super.setOauthToken(oauthToken);
      }

      @Override
      public Likestatus setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Likestatus) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Likestatus setQuotaUser(java.lang.String quotaUser) {
        return (Likestatus) super.setQuotaUser(quotaUser);
      }

      @Override
      public Likestatus setUserIp(java.lang.String userIp) {
        return (Likestatus) super.setUserIp(userIp);
      }

      @Override
      public Likestatus set(String parameterName, Object value) {
        return (Likestatus) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Liked collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Liked.List request = artEverywhere.liked().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Liked liked() {
    return new Liked();
  }

  /**
   * The "liked" collection of methods.
   */
  public class Liked {

    /**
     * Create a request for the method "liked.likedartworks".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Likedartworks#execute()} method to invoke the remote operation.
     *
     * @param email
     * @return the request
     */
    public Likedartworks likedartworks(java.lang.String email) throws java.io.IOException {
      Likedartworks result = new Likedartworks(email);
      initialize(result);
      return result;
    }

    public class Likedartworks extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection> {

      private static final String REST_PATH = "liked";

      /**
       * Create a request for the method "liked.likedartworks".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Likedartworks#execute()} method to invoke the remote
       * operation. <p> {@link Likedartworks#initialize (com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param email
       * @since 1.13
       */
      protected Likedartworks(java.lang.String email) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Likedartworks setAlt(java.lang.String alt) {
        return (Likedartworks) super.setAlt(alt);
      }

      @Override
      public Likedartworks setFields(java.lang.String fields) {
        return (Likedartworks) super.setFields(fields);
      }

      @Override
      public Likedartworks setKey(java.lang.String key) {
        return (Likedartworks) super.setKey(key);
      }

      @Override
      public Likedartworks setOauthToken(java.lang.String oauthToken) {
        return (Likedartworks) super.setOauthToken(oauthToken);
      }

      @Override
      public Likedartworks setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Likedartworks) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Likedartworks setQuotaUser(java.lang.String quotaUser) {
        return (Likedartworks) super.setQuotaUser(quotaUser);
      }

      @Override
      public Likedartworks setUserIp(java.lang.String userIp) {
        return (Likedartworks) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Likedartworks setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @com.google.api.client.util.Key("date_time")
      private java.lang.String dateTime;

      /**

       */
      public java.lang.String getDateTime() {
        return dateTime;
      }

      public Likedartworks setDateTime(java.lang.String dateTime) {
        this.dateTime = dateTime;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long fetch;

      /**

       */
      public java.lang.Long getFetch() {
        return fetch;
      }

      public Likedartworks setFetch(java.lang.Long fetch) {
        this.fetch = fetch;
        return this;
      }

      @Override
      public Likedartworks set(String parameterName, Object value) {
        return (Likedartworks) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Likes collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Likes.List request = artEverywhere.likes().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Likes likes() {
    return new Likes();
  }

  /**
   * The "likes" collection of methods.
   */
  public class Likes {

    /**
     * Create a request for the method "likes.adddate".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Adddate#execute()} method to invoke the remote operation.
     *
     * @param url
     * @return the request
     */
    public Adddate adddate(java.lang.String url) throws java.io.IOException {
      Adddate result = new Adddate(url);
      initialize(result);
      return result;
    }

    public class Adddate extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "likes";

      /**
       * Create a request for the method "likes.adddate".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Adddate#execute()} method to invoke the remote operation.
       * <p> {@link
       * Adddate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param url
       * @since 1.13
       */
      protected Adddate(java.lang.String url) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
        this.url = com.google.api.client.util.Preconditions.checkNotNull(url, "Required parameter url must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Adddate setAlt(java.lang.String alt) {
        return (Adddate) super.setAlt(alt);
      }

      @Override
      public Adddate setFields(java.lang.String fields) {
        return (Adddate) super.setFields(fields);
      }

      @Override
      public Adddate setKey(java.lang.String key) {
        return (Adddate) super.setKey(key);
      }

      @Override
      public Adddate setOauthToken(java.lang.String oauthToken) {
        return (Adddate) super.setOauthToken(oauthToken);
      }

      @Override
      public Adddate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Adddate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Adddate setQuotaUser(java.lang.String quotaUser) {
        return (Adddate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Adddate setUserIp(java.lang.String userIp) {
        return (Adddate) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String url;

      /**

       */
      public java.lang.String getUrl() {
        return url;
      }

      public Adddate setUrl(java.lang.String url) {
        this.url = url;
        return this;
      }

      @Override
      public Adddate set(String parameterName, Object value) {
        return (Adddate) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Likeslist collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Likeslist.List request = artEverywhere.likeslist().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Likeslist likeslist() {
    return new Likeslist();
  }

  /**
   * The "likeslist" collection of methods.
   */
  public class Likeslist {

    /**
     * Create a request for the method "likeslist.getlikelist".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Getlikelist#execute()} method to invoke the remote operation.
     *
     * @param url
     * @return the request
     */
    public Getlikelist getlikelist(java.lang.String url) throws java.io.IOException {
      Getlikelist result = new Getlikelist(url);
      initialize(result);
      return result;
    }

    public class Getlikelist extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainLikeDetailsCollection> {

      private static final String REST_PATH = "likeslist";

      /**
       * Create a request for the method "likeslist.getlikelist".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Getlikelist#execute()} method to invoke the remote
       * operation. <p> {@link
       * Getlikelist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param url
       * @since 1.13
       */
      protected Getlikelist(java.lang.String url) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainLikeDetailsCollection.class);
        this.url = com.google.api.client.util.Preconditions.checkNotNull(url, "Required parameter url must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getlikelist setAlt(java.lang.String alt) {
        return (Getlikelist) super.setAlt(alt);
      }

      @Override
      public Getlikelist setFields(java.lang.String fields) {
        return (Getlikelist) super.setFields(fields);
      }

      @Override
      public Getlikelist setKey(java.lang.String key) {
        return (Getlikelist) super.setKey(key);
      }

      @Override
      public Getlikelist setOauthToken(java.lang.String oauthToken) {
        return (Getlikelist) super.setOauthToken(oauthToken);
      }

      @Override
      public Getlikelist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getlikelist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getlikelist setQuotaUser(java.lang.String quotaUser) {
        return (Getlikelist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getlikelist setUserIp(java.lang.String userIp) {
        return (Getlikelist) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String url;

      /**

       */
      public java.lang.String getUrl() {
        return url;
      }

      public Getlikelist setUrl(java.lang.String url) {
        this.url = url;
        return this;
      }

      @Override
      public Getlikelist set(String parameterName, Object value) {
        return (Getlikelist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the List collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.List.List request = artEverywhere.list().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public List list() {
    return new List();
  }

  /**
   * The "list" collection of methods.
   */
  public class List {

    /**
     * Create a request for the method "list.commentlist".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Commentlist#execute()} method to invoke the remote operation.
     *
     * @param url
     * @return the request
     */
    public Commentlist commentlist(java.lang.String url) throws java.io.IOException {
      Commentlist result = new Commentlist(url);
      initialize(result);
      return result;
    }

    public class Commentlist extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainCommentDetailsCollection> {

      private static final String REST_PATH = "list";

      /**
       * Create a request for the method "list.commentlist".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Commentlist#execute()} method to invoke the remote
       * operation. <p> {@link
       * Commentlist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param url
       * @since 1.13
       */
      protected Commentlist(java.lang.String url) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainCommentDetailsCollection.class);
        this.url = com.google.api.client.util.Preconditions.checkNotNull(url, "Required parameter url must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Commentlist setAlt(java.lang.String alt) {
        return (Commentlist) super.setAlt(alt);
      }

      @Override
      public Commentlist setFields(java.lang.String fields) {
        return (Commentlist) super.setFields(fields);
      }

      @Override
      public Commentlist setKey(java.lang.String key) {
        return (Commentlist) super.setKey(key);
      }

      @Override
      public Commentlist setOauthToken(java.lang.String oauthToken) {
        return (Commentlist) super.setOauthToken(oauthToken);
      }

      @Override
      public Commentlist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Commentlist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Commentlist setQuotaUser(java.lang.String quotaUser) {
        return (Commentlist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Commentlist setUserIp(java.lang.String userIp) {
        return (Commentlist) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String url;

      /**

       */
      public java.lang.String getUrl() {
        return url;
      }

      public Commentlist setUrl(java.lang.String url) {
        this.url = url;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long fetch;

      /**

       */
      public java.lang.Long getFetch() {
        return fetch;
      }

      public Commentlist setFetch(java.lang.Long fetch) {
        this.fetch = fetch;
        return this;
      }

      @Override
      public Commentlist set(String parameterName, Object value) {
        return (Commentlist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Picinfo collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Picinfo.List request = artEverywhere.picinfo().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Picinfo picinfo() {
    return new Picinfo();
  }

  /**
   * The "picinfo" collection of methods.
   */
  public class Picinfo {

    /**
     * Create a request for the method "picinfo.updatepicture".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Updatepicture#execute()} method to invoke the remote operation.
     *
     * @param url
     * @return the request
     */
    public Updatepicture updatepicture(java.lang.String url) throws java.io.IOException {
      Updatepicture result = new Updatepicture(url);
      initialize(result);
      return result;
    }

    public class Updatepicture extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "picinfo";

      /**
       * Create a request for the method "picinfo.updatepicture".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Updatepicture#execute()} method to invoke the remote
       * operation. <p> {@link Updatepicture#initialize (com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param url
       * @since 1.13
       */
      protected Updatepicture(java.lang.String url) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
        this.url = com.google.api.client.util.Preconditions.checkNotNull(url, "Required parameter url must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Updatepicture setAlt(java.lang.String alt) {
        return (Updatepicture) super.setAlt(alt);
      }

      @Override
      public Updatepicture setFields(java.lang.String fields) {
        return (Updatepicture) super.setFields(fields);
      }

      @Override
      public Updatepicture setKey(java.lang.String key) {
        return (Updatepicture) super.setKey(key);
      }

      @Override
      public Updatepicture setOauthToken(java.lang.String oauthToken) {
        return (Updatepicture) super.setOauthToken(oauthToken);
      }

      @Override
      public Updatepicture setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updatepicture) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updatepicture setQuotaUser(java.lang.String quotaUser) {
        return (Updatepicture) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updatepicture setUserIp(java.lang.String userIp) {
        return (Updatepicture) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String url;

      /**

       */
      public java.lang.String getUrl() {
        return url;
      }

      public Updatepicture setUrl(java.lang.String url) {
        this.url = url;
        return this;
      }

      @com.google.api.client.util.Key("new_luogo")
      private java.lang.String newLuogo;

      /**

       */
      public java.lang.String getNewLuogo() {
        return newLuogo;
      }

      public Updatepicture setNewLuogo(java.lang.String newLuogo) {
        this.newLuogo = newLuogo;
        return this;
      }

      @com.google.api.client.util.Key("new_mese")
      private java.lang.String newMese;

      /**

       */
      public java.lang.String getNewMese() {
        return newMese;
      }

      public Updatepicture setNewMese(java.lang.String newMese) {
        this.newMese = newMese;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String admin;

      /**

       */
      public java.lang.String getAdmin() {
        return admin;
      }

      public Updatepicture setAdmin(java.lang.String admin) {
        this.admin = admin;
        return this;
      }

      @com.google.api.client.util.Key("new_dim")
      private java.lang.String newDim;

      /**

       */
      public java.lang.String getNewDim() {
        return newDim;
      }

      public Updatepicture setNewDim(java.lang.String newDim) {
        this.newDim = newDim;
        return this;
      }

      @com.google.api.client.util.Key("new_title")
      private java.lang.String newTitle;

      /**

       */
      public java.lang.String getNewTitle() {
        return newTitle;
      }

      public Updatepicture setNewTitle(java.lang.String newTitle) {
        this.newTitle = newTitle;
        return this;
      }

      @com.google.api.client.util.Key("new_technique")
      private java.lang.String newTechnique;

      /**

       */
      public java.lang.String getNewTechnique() {
        return newTechnique;
      }

      public Updatepicture setNewTechnique(java.lang.String newTechnique) {
        this.newTechnique = newTechnique;
        return this;
      }

      @com.google.api.client.util.Key("new_anno")
      private java.lang.Long newAnno;

      /**

       */
      public java.lang.Long getNewAnno() {
        return newAnno;
      }

      public Updatepicture setNewAnno(java.lang.Long newAnno) {
        this.newAnno = newAnno;
        return this;
      }

      @com.google.api.client.util.Key("new_descr")
      private java.lang.String newDescr;

      /**

       */
      public java.lang.String getNewDescr() {
        return newDescr;
      }

      public Updatepicture setNewDescr(java.lang.String newDescr) {
        this.newDescr = newDescr;
        return this;
      }

      @Override
      public Updatepicture set(String parameterName, Object value) {
        return (Updatepicture) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Refresh collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Refresh.List request = artEverywhere.refresh().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Refresh refresh() {
    return new Refresh();
  }

  /**
   * The "refresh" collection of methods.
   */
  public class Refresh {

    /**
     * Create a request for the method "refresh.refreshphotos".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Refreshphotos#execute()} method to invoke the remote operation.
     *
     * @param fetch
     * @param dateTime
     * @return the request
     */
    public Refreshphotos refreshphotos(java.lang.Long fetch, java.lang.String dateTime) throws java.io.IOException {
      Refreshphotos result = new Refreshphotos(fetch, dateTime);
      initialize(result);
      return result;
    }

    public class Refreshphotos extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection> {

      private static final String REST_PATH = "refresh";

      /**
       * Create a request for the method "refresh.refreshphotos".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Refreshphotos#execute()} method to invoke the remote
       * operation. <p> {@link Refreshphotos#initialize (com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param fetch
       * @param dateTime
       * @since 1.13
       */
      protected Refreshphotos(java.lang.Long fetch, java.lang.String dateTime) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDownloadResponseCollection.class);
        this.fetch = com.google.api.client.util.Preconditions.checkNotNull(fetch, "Required parameter fetch must be specified.");
        this.dateTime = com.google.api.client.util.Preconditions.checkNotNull(dateTime, "Required parameter dateTime must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Refreshphotos setAlt(java.lang.String alt) {
        return (Refreshphotos) super.setAlt(alt);
      }

      @Override
      public Refreshphotos setFields(java.lang.String fields) {
        return (Refreshphotos) super.setFields(fields);
      }

      @Override
      public Refreshphotos setKey(java.lang.String key) {
        return (Refreshphotos) super.setKey(key);
      }

      @Override
      public Refreshphotos setOauthToken(java.lang.String oauthToken) {
        return (Refreshphotos) super.setOauthToken(oauthToken);
      }

      @Override
      public Refreshphotos setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Refreshphotos) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Refreshphotos setQuotaUser(java.lang.String quotaUser) {
        return (Refreshphotos) super.setQuotaUser(quotaUser);
      }

      @Override
      public Refreshphotos setUserIp(java.lang.String userIp) {
        return (Refreshphotos) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long fetch;

      /**

       */
      public java.lang.Long getFetch() {
        return fetch;
      }

      public Refreshphotos setFetch(java.lang.Long fetch) {
        this.fetch = fetch;
        return this;
      }

      @com.google.api.client.util.Key("date_time")
      private java.lang.String dateTime;

      /**

       */
      public java.lang.String getDateTime() {
        return dateTime;
      }

      public Refreshphotos setDateTime(java.lang.String dateTime) {
        this.dateTime = dateTime;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String lang;

      /**

       */
      public java.lang.String getLang() {
        return lang;
      }

      public Refreshphotos setLang(java.lang.String lang) {
        this.lang = lang;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String luogo;

      /**

       */
      public java.lang.String getLuogo() {
        return luogo;
      }

      public Refreshphotos setLuogo(java.lang.String luogo) {
        this.luogo = luogo;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String technique;

      /**

       */
      public java.lang.String getTechnique() {
        return technique;
      }

      public Refreshphotos setTechnique(java.lang.String technique) {
        this.technique = technique;
        return this;
      }

      @Override
      public Refreshphotos set(String parameterName, Object value) {
        return (Refreshphotos) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Registration collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Registration.List request = artEverywhere.registration().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Registration registration() {
    return new Registration();
  }

  /**
   * The "registration" collection of methods.
   */
  public class Registration {

    /**
     * Create a request for the method "registration.registerartist".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Registerartist#execute()} method to invoke the remote operation.
     *
     * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistInfoMessage}
     * @return the request
     */
    public Registerartist registerartist(cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistInfoMessage content) throws java.io.IOException {
      Registerartist result = new Registerartist(content);
      initialize(result);
      return result;
    }

    public class Registerartist extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "registration";

      /**
       * Create a request for the method "registration.registerartist".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Registerartist#execute()} method to invoke the remote
       * operation. <p> {@link Registerartist#initialize (com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistInfoMessage}
       * @since 1.13
       */
      protected Registerartist(cod.com.appspot.art_everywhere.artEverywhere.model.MainArtistInfoMessage content) {
        super(ArtEverywhere.this, "POST", REST_PATH, content, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
      }

      @Override
      public Registerartist setAlt(java.lang.String alt) {
        return (Registerartist) super.setAlt(alt);
      }

      @Override
      public Registerartist setFields(java.lang.String fields) {
        return (Registerartist) super.setFields(fields);
      }

      @Override
      public Registerartist setKey(java.lang.String key) {
        return (Registerartist) super.setKey(key);
      }

      @Override
      public Registerartist setOauthToken(java.lang.String oauthToken) {
        return (Registerartist) super.setOauthToken(oauthToken);
      }

      @Override
      public Registerartist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Registerartist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Registerartist setQuotaUser(java.lang.String quotaUser) {
        return (Registerartist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Registerartist setUserIp(java.lang.String userIp) {
        return (Registerartist) super.setUserIp(userIp);
      }

      @Override
      public Registerartist set(String parameterName, Object value) {
        return (Registerartist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Remove collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Remove.List request = artEverywhere.remove().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Remove remove() {
    return new Remove();
  }

  /**
   * The "remove" collection of methods.
   */
  public class Remove {

    /**
     * Create a request for the method "remove.removecomment".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Removecomment#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Removecomment removecomment(java.lang.String id) throws java.io.IOException {
      Removecomment result = new Removecomment(id);
      initialize(result);
      return result;
    }

    public class Removecomment extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "remove";

      /**
       * Create a request for the method "remove.removecomment".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Removecomment#execute()} method to invoke the remote
       * operation. <p> {@link Removecomment#initialize (com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Removecomment(java.lang.String id) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Removecomment setAlt(java.lang.String alt) {
        return (Removecomment) super.setAlt(alt);
      }

      @Override
      public Removecomment setFields(java.lang.String fields) {
        return (Removecomment) super.setFields(fields);
      }

      @Override
      public Removecomment setKey(java.lang.String key) {
        return (Removecomment) super.setKey(key);
      }

      @Override
      public Removecomment setOauthToken(java.lang.String oauthToken) {
        return (Removecomment) super.setOauthToken(oauthToken);
      }

      @Override
      public Removecomment setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Removecomment) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Removecomment setQuotaUser(java.lang.String quotaUser) {
        return (Removecomment) super.setQuotaUser(quotaUser);
      }

      @Override
      public Removecomment setUserIp(java.lang.String userIp) {
        return (Removecomment) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Removecomment setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Removecomment set(String parameterName, Object value) {
        return (Removecomment) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Technique collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Technique.List request = artEverywhere.technique().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Technique technique() {
    return new Technique();
  }

  /**
   * The "technique" collection of methods.
   */
  public class Technique {

    /**
     * Create a request for the method "technique.puttechnique".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Puttechnique#execute()} method to invoke the remote operation.
     *
     * @param technique
     * @param eng
     * @return the request
     */
    public Puttechnique puttechnique(java.lang.String technique, java.lang.String eng) throws java.io.IOException {
      Puttechnique result = new Puttechnique(technique, eng);
      initialize(result);
      return result;
    }

    public class Puttechnique extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "technique";

      /**
       * Create a request for the method "technique.puttechnique".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Puttechnique#execute()} method to invoke the remote
       * operation. <p> {@link
       * Puttechnique#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param technique
       * @param eng
       * @since 1.13
       */
      protected Puttechnique(java.lang.String technique, java.lang.String eng) {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
        this.technique = com.google.api.client.util.Preconditions.checkNotNull(technique, "Required parameter technique must be specified.");
        this.eng = com.google.api.client.util.Preconditions.checkNotNull(eng, "Required parameter eng must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Puttechnique setAlt(java.lang.String alt) {
        return (Puttechnique) super.setAlt(alt);
      }

      @Override
      public Puttechnique setFields(java.lang.String fields) {
        return (Puttechnique) super.setFields(fields);
      }

      @Override
      public Puttechnique setKey(java.lang.String key) {
        return (Puttechnique) super.setKey(key);
      }

      @Override
      public Puttechnique setOauthToken(java.lang.String oauthToken) {
        return (Puttechnique) super.setOauthToken(oauthToken);
      }

      @Override
      public Puttechnique setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Puttechnique) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Puttechnique setQuotaUser(java.lang.String quotaUser) {
        return (Puttechnique) super.setQuotaUser(quotaUser);
      }

      @Override
      public Puttechnique setUserIp(java.lang.String userIp) {
        return (Puttechnique) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String technique;

      /**

       */
      public java.lang.String getTechnique() {
        return technique;
      }

      public Puttechnique setTechnique(java.lang.String technique) {
        this.technique = technique;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String eng;

      /**

       */
      public java.lang.String getEng() {
        return eng;
      }

      public Puttechnique setEng(java.lang.String eng) {
        this.eng = eng;
        return this;
      }

      @Override
      public Puttechnique set(String parameterName, Object value) {
        return (Puttechnique) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Techniques collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Techniques.List request = artEverywhere.techniques().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Techniques techniques() {
    return new Techniques();
  }

  /**
   * The "techniques" collection of methods.
   */
  public class Techniques {

    /**
     * Create a request for the method "techniques.gettechniques".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Gettechniques#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Gettechniques gettechniques() throws java.io.IOException {
      Gettechniques result = new Gettechniques();
      initialize(result);
      return result;
    }

    public class Gettechniques extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainTechniqueResponseCollection> {

      private static final String REST_PATH = "techniques";

      /**
       * Create a request for the method "techniques.gettechniques".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Gettechniques#execute()} method to invoke the remote
       * operation. <p> {@link Gettechniques#initialize (com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @since 1.13
       */
      protected Gettechniques() {
        super(ArtEverywhere.this, "GET", REST_PATH, null, cod.com.appspot.art_everywhere.artEverywhere.model.MainTechniqueResponseCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Gettechniques setAlt(java.lang.String alt) {
        return (Gettechniques) super.setAlt(alt);
      }

      @Override
      public Gettechniques setFields(java.lang.String fields) {
        return (Gettechniques) super.setFields(fields);
      }

      @Override
      public Gettechniques setKey(java.lang.String key) {
        return (Gettechniques) super.setKey(key);
      }

      @Override
      public Gettechniques setOauthToken(java.lang.String oauthToken) {
        return (Gettechniques) super.setOauthToken(oauthToken);
      }

      @Override
      public Gettechniques setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Gettechniques) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Gettechniques setQuotaUser(java.lang.String quotaUser) {
        return (Gettechniques) super.setQuotaUser(quotaUser);
      }

      @Override
      public Gettechniques setUserIp(java.lang.String userIp) {
        return (Gettechniques) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String lang;

      /**

       */
      public java.lang.String getLang() {
        return lang;
      }

      public Gettechniques setLang(java.lang.String lang) {
        this.lang = lang;
        return this;
      }

      @Override
      public Gettechniques set(String parameterName, Object value) {
        return (Gettechniques) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Upload collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ArtEverywhere artEverywhere = new ArtEverywhere(...);}
   *   {@code ArtEverywhere.Upload.List request = artEverywhere.upload().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Upload upload() {
    return new Upload();
  }

  /**
   * The "upload" collection of methods.
   */
  public class Upload {

    /**
     * Create a request for the method "upload.putphoto".
     *
     * This request holds the parameters needed by the artEverywhere server.  After setting any optional
     * parameters, call the {@link Putphoto#execute()} method to invoke the remote operation.
     *
     * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainUploadRequestMessage}
     * @return the request
     */
    public Putphoto putphoto(cod.com.appspot.art_everywhere.artEverywhere.model.MainUploadRequestMessage content) throws java.io.IOException {
      Putphoto result = new Putphoto(content);
      initialize(result);
      return result;
    }

    public class Putphoto extends ArtEverywhereRequest<cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "upload";

      /**
       * Create a request for the method "upload.putphoto".
       *
       * This request holds the parameters needed by the the artEverywhere server.  After setting any
       * optional parameters, call the {@link Putphoto#execute()} method to invoke the remote operation.
       * <p> {@link
       * Putphoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link cod.com.appspot.art_everywhere.artEverywhere.model.MainUploadRequestMessage}
       * @since 1.13
       */
      protected Putphoto(cod.com.appspot.art_everywhere.artEverywhere.model.MainUploadRequestMessage content) {
        super(ArtEverywhere.this, "POST", REST_PATH, content, cod.com.appspot.art_everywhere.artEverywhere.model.MainDefaultResponseMessage.class);
      }

      @Override
      public Putphoto setAlt(java.lang.String alt) {
        return (Putphoto) super.setAlt(alt);
      }

      @Override
      public Putphoto setFields(java.lang.String fields) {
        return (Putphoto) super.setFields(fields);
      }

      @Override
      public Putphoto setKey(java.lang.String key) {
        return (Putphoto) super.setKey(key);
      }

      @Override
      public Putphoto setOauthToken(java.lang.String oauthToken) {
        return (Putphoto) super.setOauthToken(oauthToken);
      }

      @Override
      public Putphoto setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Putphoto) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Putphoto setQuotaUser(java.lang.String quotaUser) {
        return (Putphoto) super.setQuotaUser(quotaUser);
      }

      @Override
      public Putphoto setUserIp(java.lang.String userIp) {
        return (Putphoto) super.setUserIp(userIp);
      }

      @Override
      public Putphoto set(String parameterName, Object value) {
        return (Putphoto) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link ArtEverywhere}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link ArtEverywhere}. */
    @Override
    public ArtEverywhere build() {
      return new ArtEverywhere(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ArtEverywhereRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setArtEverywhereRequestInitializer(
        ArtEverywhereRequestInitializer arteverywhereRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(arteverywhereRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
