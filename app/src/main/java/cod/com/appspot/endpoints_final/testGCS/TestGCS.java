/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-01-14 17:53:03 UTC)
 * on 2015-02-06 at 13:11:09 UTC 
 * Modify at your own risk.
 */

package cod.com.appspot.endpoints_final.testGCS;

/**
 * Service definition for TestGCS (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link TestGCSRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class TestGCS extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.19.1 of the testGCS library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://endpoints-final.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "testGCS/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public TestGCS(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  TestGCS(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Artistinfo collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Artistinfo.List request = testGCS.artistinfo().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Artistinfo artistinfo() {
    return new Artistinfo();
  }

  /**
   * The "artistinfo" collection of methods.
   */
  public class Artistinfo {

    /**
     * Create a request for the method "artistinfo.updateartist".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Updateartist#execute()} method to invoke the remote operation.
     *
     * @param email
     * @return the request
     */
    public Updateartist updateartist(java.lang.String email) throws java.io.IOException {
      Updateartist result = new Updateartist(email);
      initialize(result);
      return result;
    }

    public class Updateartist extends TestGCSRequest< cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "artistinfo";

      /**
       * Create a request for the method "artistinfo.updateartist".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Updateartist#execute()} method to invoke the remote operation. <p>
       * {@link
       * Updateartist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param email
       * @since 1.13
       */
      protected Updateartist(java.lang.String email) {
        super(TestGCS.this, "GET", REST_PATH, null,  cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Updateartist setAlt(java.lang.String alt) {
        return (Updateartist) super.setAlt(alt);
      }

      @Override
      public Updateartist setFields(java.lang.String fields) {
        return (Updateartist) super.setFields(fields);
      }

      @Override
      public Updateartist setKey(java.lang.String key) {
        return (Updateartist) super.setKey(key);
      }

      @Override
      public Updateartist setOauthToken(java.lang.String oauthToken) {
        return (Updateartist) super.setOauthToken(oauthToken);
      }

      @Override
      public Updateartist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updateartist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updateartist setQuotaUser(java.lang.String quotaUser) {
        return (Updateartist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updateartist setUserIp(java.lang.String userIp) {
        return (Updateartist) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Updateartist setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @com.google.api.client.util.Key("new_nome")
      private java.lang.String newNome;

      /**

       */
      public java.lang.String getNewNome() {
        return newNome;
      }

      public Updateartist setNewNome(java.lang.String newNome) {
        this.newNome = newNome;
        return this;
      }

      @com.google.api.client.util.Key("new_pic")
      private java.lang.String newPic;

      /**

       */
      public java.lang.String getNewPic() {
        return newPic;
      }

      public Updateartist setNewPic(java.lang.String newPic) {
        this.newPic = newPic;
        return this;
      }

      @com.google.api.client.util.Key("new_bio")
      private java.lang.String newBio;

      /**

       */
      public java.lang.String getNewBio() {
        return newBio;
      }

      public Updateartist setNewBio(java.lang.String newBio) {
        this.newBio = newBio;
        return this;
      }

      @com.google.api.client.util.Key("new_sito")
      private java.lang.String newSito;

      /**

       */
      public java.lang.String getNewSito() {
        return newSito;
      }

      public Updateartist setNewSito(java.lang.String newSito) {
        this.newSito = newSito;
        return this;
      }

      @com.google.api.client.util.Key("new_email")
      private java.lang.String newEmail;

      /**

       */
      public java.lang.String getNewEmail() {
        return newEmail;
      }

      public Updateartist setNewEmail(java.lang.String newEmail) {
        this.newEmail = newEmail;
        return this;
      }

      @com.google.api.client.util.Key("new_cognome")
      private java.lang.String newCognome;

      /**

       */
      public java.lang.String getNewCognome() {
        return newCognome;
      }

      public Updateartist setNewCognome(java.lang.String newCognome) {
        this.newCognome = newCognome;
        return this;
      }

      @com.google.api.client.util.Key("new_nickname")
      private java.lang.String newNickname;

      /**

       */
      public java.lang.String getNewNickname() {
        return newNickname;
      }

      public Updateartist setNewNickname(java.lang.String newNickname) {
        this.newNickname = newNickname;
        return this;
      }

      @Override
      public Updateartist set(String parameterName, Object value) {
        return (Updateartist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Artworks collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Artworks.List request = testGCS.artworks().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Artworks artworks() {
    return new Artworks();
  }

  /**
   * The "artworks" collection of methods.
   */
  public class Artworks {

    /**
     * Create a request for the method "artworks.getartworks".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Getartworks#execute()} method to invoke the remote operation.
     *
     * @param email
     * @return the request
     */
    public Getartworks getartworks(java.lang.String email) throws java.io.IOException {
      Getartworks result = new Getartworks(email);
      initialize(result);
      return result;
    }

    public class Getartworks extends TestGCSRequest< cod.com.appspot.endpoints_final.testGCS.model.MainPictureDetailsCollection> {

      private static final String REST_PATH = "artworks";

      /**
       * Create a request for the method "artworks.getartworks".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Getartworks#execute()} method to invoke the remote operation. <p>
       * {@link
       * Getartworks#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param email
       * @since 1.13
       */
      protected Getartworks(java.lang.String email) {
        super(TestGCS.this, "GET", REST_PATH, null,  cod.com.appspot.endpoints_final.testGCS.model.MainPictureDetailsCollection.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getartworks setAlt(java.lang.String alt) {
        return (Getartworks) super.setAlt(alt);
      }

      @Override
      public Getartworks setFields(java.lang.String fields) {
        return (Getartworks) super.setFields(fields);
      }

      @Override
      public Getartworks setKey(java.lang.String key) {
        return (Getartworks) super.setKey(key);
      }

      @Override
      public Getartworks setOauthToken(java.lang.String oauthToken) {
        return (Getartworks) super.setOauthToken(oauthToken);
      }

      @Override
      public Getartworks setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getartworks) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getartworks setQuotaUser(java.lang.String quotaUser) {
        return (Getartworks) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getartworks setUserIp(java.lang.String userIp) {
        return (Getartworks) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Getartworks setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @Override
      public Getartworks set(String parameterName, Object value) {
        return (Getartworks) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Delete collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Delete.List request = testGCS.delete().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Delete delete() {
    return new Delete();
  }

  /**
   * The "delete" collection of methods.
   */
  public class Delete {

    /**
     * Create a request for the method "delete.deletephoto".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Deletephoto#execute()} method to invoke the remote operation.
     *
     * @param filename
     * @param isNdbEntry
     * @return the request
     */
    public Deletephoto deletephoto(java.lang.String filename, java.lang.Boolean isNdbEntry) throws java.io.IOException {
      Deletephoto result = new Deletephoto(filename, isNdbEntry);
      initialize(result);
      return result;
    }

    public class Deletephoto extends TestGCSRequest< cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "delete";

      /**
       * Create a request for the method "delete.deletephoto".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Deletephoto#execute()} method to invoke the remote operation. <p>
       * {@link
       * Deletephoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param filename
       * @param isNdbEntry
       * @since 1.13
       */
      protected Deletephoto(java.lang.String filename, java.lang.Boolean isNdbEntry) {
        super(TestGCS.this, "GET", REST_PATH, null,  cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage.class);
        this.filename = com.google.api.client.util.Preconditions.checkNotNull(filename, "Required parameter filename must be specified.");
        this.isNdbEntry = com.google.api.client.util.Preconditions.checkNotNull(isNdbEntry, "Required parameter isNdbEntry must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Deletephoto setAlt(java.lang.String alt) {
        return (Deletephoto) super.setAlt(alt);
      }

      @Override
      public Deletephoto setFields(java.lang.String fields) {
        return (Deletephoto) super.setFields(fields);
      }

      @Override
      public Deletephoto setKey(java.lang.String key) {
        return (Deletephoto) super.setKey(key);
      }

      @Override
      public Deletephoto setOauthToken(java.lang.String oauthToken) {
        return (Deletephoto) super.setOauthToken(oauthToken);
      }

      @Override
      public Deletephoto setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Deletephoto) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Deletephoto setQuotaUser(java.lang.String quotaUser) {
        return (Deletephoto) super.setQuotaUser(quotaUser);
      }

      @Override
      public Deletephoto setUserIp(java.lang.String userIp) {
        return (Deletephoto) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String filename;

      /**

       */
      public java.lang.String getFilename() {
        return filename;
      }

      public Deletephoto setFilename(java.lang.String filename) {
        this.filename = filename;
        return this;
      }

      @com.google.api.client.util.Key("is_ndb_entry")
      private java.lang.Boolean isNdbEntry;

      /**

       */
      public java.lang.Boolean getIsNdbEntry() {
        return isNdbEntry;
      }

      public Deletephoto setIsNdbEntry(java.lang.Boolean isNdbEntry) {
        this.isNdbEntry = isNdbEntry;
        return this;
      }

      @Override
      public Deletephoto set(String parameterName, Object value) {
        return (Deletephoto) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Display collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Display.List request = testGCS.display().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Display display() {
    return new Display();
  }

  /**
   * The "display" collection of methods.
   */
  public class Display {

    /**
     * Create a request for the method "display.getphotos".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Getphotos#execute()} method to invoke the remote operation.
     *
     * @param fetch
     * @return the request
     */
    public Getphotos getphotos(java.lang.Long fetch) throws java.io.IOException {
      Getphotos result = new Getphotos(fetch);
      initialize(result);
      return result;
    }

    public class Getphotos extends TestGCSRequest< cod.com.appspot.endpoints_final.testGCS.model.MainDownloadResponseCollection> {

      private static final String REST_PATH = "display";

      /**
       * Create a request for the method "display.getphotos".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Getphotos#execute()} method to invoke the remote operation. <p>
       * {@link
       * Getphotos#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fetch
       * @since 1.13
       */
      protected Getphotos(java.lang.Long fetch) {
        super(TestGCS.this, "GET", REST_PATH, null,  cod.com.appspot.endpoints_final.testGCS.model.MainDownloadResponseCollection.class);
        this.fetch = com.google.api.client.util.Preconditions.checkNotNull(fetch, "Required parameter fetch must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getphotos setAlt(java.lang.String alt) {
        return (Getphotos) super.setAlt(alt);
      }

      @Override
      public Getphotos setFields(java.lang.String fields) {
        return (Getphotos) super.setFields(fields);
      }

      @Override
      public Getphotos setKey(java.lang.String key) {
        return (Getphotos) super.setKey(key);
      }

      @Override
      public Getphotos setOauthToken(java.lang.String oauthToken) {
        return (Getphotos) super.setOauthToken(oauthToken);
      }

      @Override
      public Getphotos setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getphotos) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getphotos setQuotaUser(java.lang.String quotaUser) {
        return (Getphotos) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getphotos setUserIp(java.lang.String userIp) {
        return (Getphotos) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long fetch;

      /**

       */
      public java.lang.Long getFetch() {
        return fetch;
      }

      public Getphotos setFetch(java.lang.Long fetch) {
        this.fetch = fetch;
        return this;
      }

      @com.google.api.client.util.Key("date_time")
      private java.lang.String dateTime;

      /**

       */
      public java.lang.String getDateTime() {
        return dateTime;
      }

      public Getphotos setDateTime(java.lang.String dateTime) {
        this.dateTime = dateTime;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String technique;

      /**

       */
      public java.lang.String getTechnique() {
        return technique;
      }

      public Getphotos setTechnique(java.lang.String technique) {
        this.technique = technique;
        return this;
      }

      @Override
      public Getphotos set(String parameterName, Object value) {
        return (Getphotos) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Getinfo collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Getinfo.List request = testGCS.getinfo().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Getinfo getinfo() {
    return new Getinfo();
  }

  /**
   * The "getinfo" collection of methods.
   */
  public class Getinfo {

    /**
     * Create a request for the method "getinfo.getartist".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Getartist#execute()} method to invoke the remote operation.
     *
     * @param email
     * @return the request
     */
    public Getartist getartist(java.lang.String email) throws java.io.IOException {
      Getartist result = new Getartist(email);
      initialize(result);
      return result;
    }

    public class Getartist extends TestGCSRequest<cod.com.appspot.endpoints_final.testGCS.model.MainArtistDetailsMessage> {

      private static final String REST_PATH = "getinfo";

      /**
       * Create a request for the method "getinfo.getartist".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Getartist#execute()} method to invoke the remote operation. <p>
       * {@link
       * Getartist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param email
       * @since 1.13
       */
      protected Getartist(java.lang.String email) {
        super(TestGCS.this, "GET", REST_PATH, null, cod.com.appspot.endpoints_final.testGCS.model.MainArtistDetailsMessage.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getartist setAlt(java.lang.String alt) {
        return (Getartist) super.setAlt(alt);
      }

      @Override
      public Getartist setFields(java.lang.String fields) {
        return (Getartist) super.setFields(fields);
      }

      @Override
      public Getartist setKey(java.lang.String key) {
        return (Getartist) super.setKey(key);
      }

      @Override
      public Getartist setOauthToken(java.lang.String oauthToken) {
        return (Getartist) super.setOauthToken(oauthToken);
      }

      @Override
      public Getartist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getartist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getartist setQuotaUser(java.lang.String quotaUser) {
        return (Getartist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getartist setUserIp(java.lang.String userIp) {
        return (Getartist) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Getartist setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @Override
      public Getartist set(String parameterName, Object value) {
        return (Getartist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Picinfo collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Picinfo.List request = testGCS.picinfo().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Picinfo picinfo() {
    return new Picinfo();
  }

  /**
   * The "picinfo" collection of methods.
   */
  public class Picinfo {

    /**
     * Create a request for the method "picinfo.updatepicture".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Updatepicture#execute()} method to invoke the remote operation.
     *
     * @param gcsFilename
     * @return the request
     */
    public Updatepicture updatepicture(java.lang.String gcsFilename) throws java.io.IOException {
      Updatepicture result = new Updatepicture(gcsFilename);
      initialize(result);
      return result;
    }

    public class Updatepicture extends TestGCSRequest<cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "picinfo";

      /**
       * Create a request for the method "picinfo.updatepicture".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Updatepicture#execute()} method to invoke the remote operation. <p>
       * {@link Updatepicture# initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param gcsFilename
       * @since 1.13
       */
      protected Updatepicture(java.lang.String gcsFilename) {
        super(TestGCS.this, "GET", REST_PATH, null, cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage.class);
        this.gcsFilename = com.google.api.client.util.Preconditions.checkNotNull(gcsFilename, "Required parameter gcsFilename must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Updatepicture setAlt(java.lang.String alt) {
        return (Updatepicture) super.setAlt(alt);
      }

      @Override
      public Updatepicture setFields(java.lang.String fields) {
        return (Updatepicture) super.setFields(fields);
      }

      @Override
      public Updatepicture setKey(java.lang.String key) {
        return (Updatepicture) super.setKey(key);
      }

      @Override
      public Updatepicture setOauthToken(java.lang.String oauthToken) {
        return (Updatepicture) super.setOauthToken(oauthToken);
      }

      @Override
      public Updatepicture setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updatepicture) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updatepicture setQuotaUser(java.lang.String quotaUser) {
        return (Updatepicture) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updatepicture setUserIp(java.lang.String userIp) {
        return (Updatepicture) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("gcs_filename")
      private java.lang.String gcsFilename;

      /**

       */
      public java.lang.String getGcsFilename() {
        return gcsFilename;
      }

      public Updatepicture setGcsFilename(java.lang.String gcsFilename) {
        this.gcsFilename = gcsFilename;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String dim;

      /**

       */
      public java.lang.String getDim() {
        return dim;
      }

      public Updatepicture setDim(java.lang.String dim) {
        this.dim = dim;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String descr;

      /**

       */
      public java.lang.String getDescr() {
        return descr;
      }

      public Updatepicture setDescr(java.lang.String descr) {
        this.descr = descr;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String technique;

      /**

       */
      public java.lang.String getTechnique() {
        return technique;
      }

      public Updatepicture setTechnique(java.lang.String technique) {
        this.technique = technique;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String filename;

      /**

       */
      public java.lang.String getFilename() {
        return filename;
      }

      public Updatepicture setFilename(java.lang.String filename) {
        this.filename = filename;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String luogo;

      /**

       */
      public java.lang.String getLuogo() {
        return luogo;
      }

      public Updatepicture setLuogo(java.lang.String luogo) {
        this.luogo = luogo;
        return this;
      }

      @Override
      public Updatepicture set(String parameterName, Object value) {
        return (Updatepicture) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Registration collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Registration.List request = testGCS.registration().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Registration registration() {
    return new Registration();
  }

  /**
   * The "registration" collection of methods.
   */
  public class Registration {

    /**
     * Create a request for the method "registration.registerartist".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Registerartist#execute()} method to invoke the remote operation.
     *
     * @param email
     * @param nome
     * @param cognome
     * @return the request
     */
    public Registerartist registerartist(java.lang.String email, java.lang.String nome, java.lang.String cognome) throws java.io.IOException {
      Registerartist result = new Registerartist(email, nome, cognome);
      initialize(result);
      return result;
    }

    public class Registerartist extends TestGCSRequest<cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "registration";

      /**
       * Create a request for the method "registration.registerartist".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Registerartist#execute()} method to invoke the remote operation.
       * <p> {@link Registerartist# initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param email
       * @param nome
       * @param cognome
       * @since 1.13
       */
      protected Registerartist(java.lang.String email, java.lang.String nome, java.lang.String cognome) {
        super(TestGCS.this, "GET", REST_PATH, null, cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage.class);
        this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
        this.nome = com.google.api.client.util.Preconditions.checkNotNull(nome, "Required parameter nome must be specified.");
        this.cognome = com.google.api.client.util.Preconditions.checkNotNull(cognome, "Required parameter cognome must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Registerartist setAlt(java.lang.String alt) {
        return (Registerartist) super.setAlt(alt);
      }

      @Override
      public Registerartist setFields(java.lang.String fields) {
        return (Registerartist) super.setFields(fields);
      }

      @Override
      public Registerartist setKey(java.lang.String key) {
        return (Registerartist) super.setKey(key);
      }

      @Override
      public Registerartist setOauthToken(java.lang.String oauthToken) {
        return (Registerartist) super.setOauthToken(oauthToken);
      }

      @Override
      public Registerartist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Registerartist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Registerartist setQuotaUser(java.lang.String quotaUser) {
        return (Registerartist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Registerartist setUserIp(java.lang.String userIp) {
        return (Registerartist) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public Registerartist setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String nome;

      /**

       */
      public java.lang.String getNome() {
        return nome;
      }

      public Registerartist setNome(java.lang.String nome) {
        this.nome = nome;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cognome;

      /**

       */
      public java.lang.String getCognome() {
        return cognome;
      }

      public Registerartist setCognome(java.lang.String cognome) {
        this.cognome = cognome;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String bio;

      /**

       */
      public java.lang.String getBio() {
        return bio;
      }

      public Registerartist setBio(java.lang.String bio) {
        this.bio = bio;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String sito;

      /**

       */
      public java.lang.String getSito() {
        return sito;
      }

      public Registerartist setSito(java.lang.String sito) {
        this.sito = sito;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String pic;

      /**

       */
      public java.lang.String getPic() {
        return pic;
      }

      public Registerartist setPic(java.lang.String pic) {
        this.pic = pic;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String nickname;

      /**

       */
      public java.lang.String getNickname() {
        return nickname;
      }

      public Registerartist setNickname(java.lang.String nickname) {
        this.nickname = nickname;
        return this;
      }

      @Override
      public Registerartist set(String parameterName, Object value) {
        return (Registerartist) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Technique collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Technique.List request = testGCS.technique().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Technique technique() {
    return new Technique();
  }

  /**
   * The "technique" collection of methods.
   */
  public class Technique {

    /**
     * Create a request for the method "technique.puttechnique".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Puttechnique#execute()} method to invoke the remote operation.
     *
     * @param technique
     * @return the request
     */
    public Puttechnique puttechnique(java.lang.String technique) throws java.io.IOException {
      Puttechnique result = new Puttechnique(technique);
      initialize(result);
      return result;
    }

    public class Puttechnique extends TestGCSRequest<cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "technique";

      /**
       * Create a request for the method "technique.puttechnique".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Puttechnique#execute()} method to invoke the remote operation. <p>
       * {@link
       * Puttechnique#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param technique
       * @since 1.13
       */
      protected Puttechnique(java.lang.String technique) {
        super(TestGCS.this, "GET", REST_PATH, null, cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage.class);
        this.technique = com.google.api.client.util.Preconditions.checkNotNull(technique, "Required parameter technique must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Puttechnique setAlt(java.lang.String alt) {
        return (Puttechnique) super.setAlt(alt);
      }

      @Override
      public Puttechnique setFields(java.lang.String fields) {
        return (Puttechnique) super.setFields(fields);
      }

      @Override
      public Puttechnique setKey(java.lang.String key) {
        return (Puttechnique) super.setKey(key);
      }

      @Override
      public Puttechnique setOauthToken(java.lang.String oauthToken) {
        return (Puttechnique) super.setOauthToken(oauthToken);
      }

      @Override
      public Puttechnique setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Puttechnique) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Puttechnique setQuotaUser(java.lang.String quotaUser) {
        return (Puttechnique) super.setQuotaUser(quotaUser);
      }

      @Override
      public Puttechnique setUserIp(java.lang.String userIp) {
        return (Puttechnique) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String technique;

      /**

       */
      public java.lang.String getTechnique() {
        return technique;
      }

      public Puttechnique setTechnique(java.lang.String technique) {
        this.technique = technique;
        return this;
      }

      @Override
      public Puttechnique set(String parameterName, Object value) {
        return (Puttechnique) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Techniques collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Techniques.List request = testGCS.techniques().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Techniques techniques() {
    return new Techniques();
  }

  /**
   * The "techniques" collection of methods.
   */
  public class Techniques {

    /**
     * Create a request for the method "techniques.gettechniques".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Gettechniques#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Gettechniques gettechniques() throws java.io.IOException {
      Gettechniques result = new Gettechniques();
      initialize(result);
      return result;
    }

    public class Gettechniques extends TestGCSRequest<cod.com.appspot.endpoints_final.testGCS.model.MainTechniqueResponseCollection> {

      private static final String REST_PATH = "techniques";

      /**
       * Create a request for the method "techniques.gettechniques".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Gettechniques#execute()} method to invoke the remote operation. <p>
       * {@link Gettechniques# initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @since 1.13
       */
      protected Gettechniques() {
        super(TestGCS.this, "GET", REST_PATH, null, cod.com.appspot.endpoints_final.testGCS.model.MainTechniqueResponseCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Gettechniques setAlt(java.lang.String alt) {
        return (Gettechniques) super.setAlt(alt);
      }

      @Override
      public Gettechniques setFields(java.lang.String fields) {
        return (Gettechniques) super.setFields(fields);
      }

      @Override
      public Gettechniques setKey(java.lang.String key) {
        return (Gettechniques) super.setKey(key);
      }

      @Override
      public Gettechniques setOauthToken(java.lang.String oauthToken) {
        return (Gettechniques) super.setOauthToken(oauthToken);
      }

      @Override
      public Gettechniques setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Gettechniques) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Gettechniques setQuotaUser(java.lang.String quotaUser) {
        return (Gettechniques) super.setQuotaUser(quotaUser);
      }

      @Override
      public Gettechniques setUserIp(java.lang.String userIp) {
        return (Gettechniques) super.setUserIp(userIp);
      }

      @Override
      public Gettechniques set(String parameterName, Object value) {
        return (Gettechniques) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Upload collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code TestGCS testGCS = new TestGCS(...);}
   *   {@code TestGCS.Upload.List request = testGCS.upload().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Upload upload() {
    return new Upload();
  }

  /**
   * The "upload" collection of methods.
   */
  public class Upload {

    /**
     * Create a request for the method "upload.putphoto".
     *
     * This request holds the parameters needed by the testGCS server.  After setting any optional
     * parameters, call the {@link Putphoto#execute()} method to invoke the remote operation.
     *
     * @param content the {@link cod.com.appspot.endpoints_final.testGCS.model.MainUploadRequestMessage}
     * @return the request
     */
    public Putphoto putphoto(cod.com.appspot.endpoints_final.testGCS.model.MainUploadRequestMessage content) throws java.io.IOException {
      Putphoto result = new Putphoto(content);
      initialize(result);
      return result;
    }

    public class Putphoto extends TestGCSRequest<cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage> {

      private static final String REST_PATH = "upload";

      /**
       * Create a request for the method "upload.putphoto".
       *
       * This request holds the parameters needed by the the testGCS server.  After setting any optional
       * parameters, call the {@link Putphoto#execute()} method to invoke the remote operation. <p>
       * {@link
       * Putphoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link cod.com.appspot.endpoints_final.testGCS.model.MainUploadRequestMessage}
       * @since 1.13
       */
      protected Putphoto(cod.com.appspot.endpoints_final.testGCS.model.MainUploadRequestMessage content) {
        super(TestGCS.this, "POST", REST_PATH, content, cod.com.appspot.endpoints_final.testGCS.model.MainDefaultResponseMessage.class);
      }

      @Override
      public Putphoto setAlt(java.lang.String alt) {
        return (Putphoto) super.setAlt(alt);
      }

      @Override
      public Putphoto setFields(java.lang.String fields) {
        return (Putphoto) super.setFields(fields);
      }

      @Override
      public Putphoto setKey(java.lang.String key) {
        return (Putphoto) super.setKey(key);
      }

      @Override
      public Putphoto setOauthToken(java.lang.String oauthToken) {
        return (Putphoto) super.setOauthToken(oauthToken);
      }

      @Override
      public Putphoto setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Putphoto) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Putphoto setQuotaUser(java.lang.String quotaUser) {
        return (Putphoto) super.setQuotaUser(quotaUser);
      }

      @Override
      public Putphoto setUserIp(java.lang.String userIp) {
        return (Putphoto) super.setUserIp(userIp);
      }

      @Override
      public Putphoto set(String parameterName, Object value) {
        return (Putphoto) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link TestGCS}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link TestGCS}. */
    @Override
    public TestGCS build() {
      return new TestGCS(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link TestGCSRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setTestGCSRequestInitializer(
        TestGCSRequestInitializer testgcsRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(testgcsRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
